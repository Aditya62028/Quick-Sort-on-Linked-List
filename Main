import java.io.*;
class Node {
    int data;
    Node next;
    Node(int key) {
        data = key;
        next = null;
    }
}
class SortLL {
    static Node head;
    public static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }
    public static void addToTheLast(Node node) {
        if (head == null) {
            head = node;
        } else {
            Node temp = head;
            while (temp.next != null) temp = temp.next;
            temp.next = node;
        }
    }
}
public class GfG {
    public static void main(String[] args) throws IOException {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String str[] = read.readLine().trim().split(" ");
            int n = str.length;
            SortLL.head = new Node(Integer.parseInt(str[0]));
            SortLL.addToTheLast(SortLL.head);
            for (int i = 1; i < n; i++) {
                int a = Integer.parseInt(str[i]);
                SortLL.addToTheLast(new Node(a));
            }
            Node node = quickSort(SortLL.head);
            SortLL.printList(node);
            System.out.println();
        }
    }
    public static Node quickSort(Node node) {
        if (node == null) return null;
        Node tail = getTail(node);
        sort(node, tail);
        return node;
    }
    private static Node getTail(Node head) {
        Node curr = head;
        while (curr != null && curr.next != null)
            curr = curr.next;
        return curr;
    }
    private static void sort(Node head, Node tail) {
        if (head == null || head == tail) return;
        Node pivot = partition(head, tail);
        sort(head, pivot);  
        if (pivot != null && pivot.next != null) {
            sort(pivot.next, tail);
        }
    }
    private static void swap(Node node1, Node node2) {
        int temp = node1.data;
        node1.data = node2.data;
        node2.data = temp;
    }
    private static Node partition(Node head, Node tail) {
        int pivotValue = head.data;
        Node i = head;
        Node j = head.next;

        while (j != tail.next) {
            if (j.data < pivotValue) {
                i = i.next;
                swap(i, j);
            }
            j = j.next;
        }
        swap(head, i);
        return i;
    }
}
